<HTML>
<HEAD>
   <TITLE>Calculating selection index</TITLE>
<SCRIPT LANGUAGE="JavaScript">

function Restart() {
document.selind.in.value =" ";document.selind.out.value =" ";
}


function Calculate() {

   a=" ";
   cif= document.selind.gg2.value;
   strin =    document.selind.in.value ;

   strin = strin.replace(/^[\s]+/g,''); strin = strin.replace(/\n/g,',');
   strin = strin.replace(/,,/g,',');    strin = strin.replace(/[\s]+/g,' ');
   strin = strin.replace(/\, /g,'\n');  strin = strin.replace(/\,/g,'\n');


var tempArray = strin.split('\n');

var pop = [];
								
for (var i = 0; i < tempArray.length; i++) { pop[i] = tempArray[i].split(' ');}

        l=  pop[0][1]*1;    k1 = (eval(tempArray.length) - eval(l) - eval(1))*1;
                            k= eval(tempArray.length) ;  kk = (eval(l)+eval(2));  


xx=(eval(k)-eval(kk)+eval(1))*1;
var indx= new Array(6); 
var index= new Array(3); 

for (var i = 0; i < xx; i++) {   indx[i]=new Array(xx); }
for (var i = 0; i < xx; i++) {   index[i]=new Array(xx); }
 
 
 var anim = new Array(k1); for (var i = 0; i < k1; i++) { anim[i] = new Array(k1);  }

				k1 = (eval(tempArray.length) - eval(kk) +eval(1))*1;			
 var bpb= new Array(2); for (var i = 0; i < k1; i++) {    bpb[i]=new Array(k1);  }

x=eval(k)+eval(1);   
          for (i=kk; i<x; i++) {	
			anim[i-kk][i-kk] =1;
			  dad =  pop[i-1][1];
			  mom =  pop[i-1][2];
	   if (  dad >0 && mom>0) anim[i-kk][i-kk] =1+anim[dad-1][mom-1]/2;
y=eval(i)+eval(1);
	for (j=y; j<x; j++) {
			dad =  pop[j-1][1];
			mom =  pop[j-1][2];
	      anim[j-kk][i-kk]=0;
	      if (  mom >0) anim[j-kk][i-kk]= anim[mom-1][i-kk]/2; 
	      if (  dad >0) anim[j-kk][i-kk] +=   anim[dad-1][i-kk]/2; 
	      if(pop[i-1][0] == pop[j-1][0])  anim[j-kk][i-kk]= anim[i-kk][i-kk];
              anim[i-kk][j-kk]= anim[j-kk][i-kk];   //mirror
      }}
    


var Pvar= new Array(l);
var Avar= new Array(l);
for ( i = 0; i < l; i++) {
Pvar[i]= new Array(l);
Avar[i]= new Array(l);  }

        countp=0; 
          for (i=1; i<l+1; i++) {                                                    //corr to variance
              Pvar[i-1 ][i-1] =pop[i ][0]; Avar[i-1 ][i-1] =pop[i ][1];
	  for (j=i+1; j<l+1; j++) {
						   z= pop[i][1] *pop[j][1];
	  pop[i][j+3] =pop[i][j+3] * Math.sqrt(z) ; 

	  Avar[j-1 ][i-1] =pop[i ][j+3];Avar[i-1 ][j-1] =pop[i ][j+3];
						    z= pop[i][0] *pop[j][0];
	  pop[j ][i+3] =pop[j][i+3] *Math.sqrt(z) ; 
	  Pvar[j-1 ][i-1] =pop[j ][i+3]; Pvar[i-1 ][j-1] =pop[j ][i+3]; 
	}}
				
	 for (ll=kk-1; ll<k; ll++) {x=eval(ll)-eval(kk)+eval(1);  index[x][0]=pop[ll][0];	                 // trait numbers
        for (i=1; i<l+1; i++) { if(pop[ll][i+3] > 0) 
    	{ indx[x][0]=i; countp +=1; 
	y=i+eval(3); indx[countp-1][2]=pop[ll][y]; indx[countp-1][3]=pop[ll][3]; 
	 z=1;  if(pop[ll][2] > 0) {z=2;}  if(pop[ll][3] < 0) {z=4;}  if(pop [ll][3] == 0) {z=0;}
	 indx[countp-1][4]=.25*z;   } }
 	  }

 									// setting up P and A Matrix

var PP= new Array(k1);
var A=  new Array(k1);
var bb= new Array(k1);
var P=  new Array(countp);
var Px= Array(countp);
var Pinv= Array(countp);
 
for (var i = 0; i < countp; i++) {
   PP[i]= Array(countp);
    A[i]= Array(countp);
   bb[i]= Array(countp);
    P[i]= Array(countp);
   Px[i]= Array(countp);
 Pinv[i]= Array(countp);      }

     
								
       
	count=-1; for (i=0; i<k1; i++) { if( indx[i][0] > 0 ) {count +=1;
				                                        indx[count][1]= indx[i][0];
				      ii=  indx[count][1]; indx[count][5]=  pop[ii][3];								
      for (j=0; j<k1; j++)  {	 PP[count][j]= anim[i][j];   
   				  A[count][j]= anim[i][j];    }	}}

								// calculating a*CovarP 
        for (i=0; i<countp; i++) {  count =-1;
        for (j=0; j<k1; j++)  { if(indx[j][0] > 0 ) {count +=1; P[i][count]= PP[i][j];
								       Px[i][count]= PP[i][j];} } }

        for (i=0; i<countp; i++) {   for (j=0; j<countp; j++) { 
                                                     ii=  indx[i][1]-1;jj=  indx[j][1]-1;
     zzz=Pvar[ii][jj]; if(Px[i][j] < 1) {zzz=Avar[ii][jj]; }
     z=0;if(indx[i][3] < 0) z= pop[0][ii+4]*pop[ii+1][0]; 		// obs c squared
     zz=indx[i][3];  
     if(Px[i][j] == 1 &&  zz != 0 )  {  P[i][j]=(Pvar[ii][jj]+ 
        (Math.abs(zz)-1)*(indx[i][4] * Avar[ii][jj] +z) )/Math.abs(zz); }                     // correction for number of obs
     else { P[i][j]= P[i][j]*zzz;}
     if(Px[i][j] == 1 &&  zz > 0 && i != j ) { P[i][j]= indx[i][4]*Avar[ii][jj];} 
      }	}  

						// calculating A*weight's
	
       for (i=0; i<countp; i++)  { z=0; ii=  indx[i][1]; 
       for (ll=0; ll<l; ll++)  {    z+= pop[ll+1][2]*Avar[ii-1][ll];}
       for (j=0; j<k1; j++)      {  A[i][j]= A[i][j] *z;      }
       }

					
       Pinv = matrix_invert(P);					// the inverse
 								// calculating b's

     for (i=0; i<k1; i++) { for (j=0; j<countp; j++){
     z=0;  for (ll=0; ll<countp; ll++)  {  z+= Pinv[ll][j]*A[ll][i];}
     bb[j][i]= z;       }}
 								// calculating I's
 
     for (i=0; i<k1; i++) { 
     z=0;  for (ll=0; ll<countp; ll++)  {  z+= bb[ll][i]*(indx[ll][2] - indx[ll][5] )  ;}
     index[i][1]= z;       }

  						// calculating 	variances
     zzz=0; for (j=0; j<l; j++)  { 
     zz1=0;  for (ll=0; ll<l; ll++)  { 
     zz1+= Avar[ll][j]*pop[ll+1][2]; } x=eval(j)+eval(1); zzz+= pop[x][2]*zz1; }

  
   for (i=0; i<k1; i++) { zz=0; for (j=0; j<countp; j++)  { 
     z=0;  for (ll=0; ll<countp; ll++)  {
     z+= bb[ll][i]*P[j][ll]; }       zz+= bb[j][i]*z;    }

      bpb[i][0]=index[i][0];bpb[i][1]=zz;
     index[i][2]= zz/zzz; x=eval(i)+eval(kk)-eval(1); 
    if (pop[x][3] > 0) {index[i][2]=0;bpb[i][1]=0;}
   	 }


a +="\n   Relationship   Matrix\n";

for (i=0; i<k1; i++) {
                for (j=0; j<k1; j++) {  y=  anim[i][j]*1;

                                                   a += y.toFixed(cif) + "\t";} a +="\n";}
a +="\n   Pvar   Matrix\n" ;
for (i=0; i<l; i++) {
               for (j=0; j<l; j++) {  y=  Pvar[i][j]*1;

                                                   a += y.toFixed(cif) + "\t";} a +="\n";}
a +="\n   Avar   Matrix\n" ;
for (i=0; i<l; i++) {
               for (j=0; j<l; j++) {  y=  Avar[i][j]*1;

                                                   a += y.toFixed(cif) + "\t";} a +="\n";}

a +="\n Animal   Index  Accuracy squared\n" ;
for (i=0; i<xx; i++) {
               for (j=0; j<3; j++) {  y=  index[i][j]*1;

                                                   a += y.toFixed(cif) + "\t";} a +="\n";}
document.selind.out.value =   a;

a +="\n b-values\n" ;
for (i=0; i<countp; i++) {
               for (j=0; j<k1; j++) {  y=  bb[i][j]*1;

                                                   a += y.toFixed(cif) + "\t";} a +="\n";}



document.selind.out.value =   a;

}


// Returns the inverse of matrix `M`. Matrix Inversion in JavaScript 16 Nov 2013 by Andrew Ippoliti
// http://blog.acipo.com/matrix-inversion-in-javascript/


function matrix_invert(M){
    // I use Guassian Elimination to calculate the inverse:
    // (1) 'augment' the matrix (left) by the identity (on the right)
    // (2) Turn the matrix on the left into the identity by elemetry row ops
    // (3) The matrix on the right is the inverse (was the identity matrix)
    // There are 3 elemtary row ops: (I combine b and c in my code)
    // (a) Swap 2 rows
    // (b) Multiply a row by a scalar
    // (c) Add 2 rows
    
    //if the matrix isn't square: exit (error)
    if(M.length !== M[0].length){return;}
    
    //create the identity matrix (I), and a copy (C) of the original
    var i=0, ii=0, j=0, dim=M.length, e=0, t=0;
    var I = [], C = [];
    for(i=0; i<dim; i+=1){
        // Create the row
        I[I.length]=[];
        C[C.length]=[];
        for(j=0; j<dim; j+=1){
            
            //if we're on the diagonal, put a 1 (for identity)
            if(i==j){ I[i][j] = 1; }
            else{ I[i][j] = 0; }
            
            // Also, make the copy of the original
            C[i][j] = M[i][j];
        }
    }
    
    // Perform elementary row operations
    for(i=0; i<dim; i+=1){
        // get the element e on the diagonal
        e = C[i][i];
        
        // if we have a 0 on the diagonal (we'll need to swap with a lower row)
        if(e==0){
            //look through every row below the i'th row
            for(ii=i+1; ii<dim; ii+=1){
                //if the ii'th row has a non-0 in the i'th col
                if(C[ii][i] != 0){
                    //it would make the diagonal have a non-0 so swap it
                    for(j=0; j<dim; j++){
                        e = C[i][j];       //temp store i'th row
                        C[i][j] = C[ii][j];//replace i'th row by ii'th
                        C[ii][j] = e;      //repace ii'th by temp
                        e = I[i][j];       //temp store i'th row
                        I[i][j] = I[ii][j];//replace i'th row by ii'th
                        I[ii][j] = e;      //repace ii'th by temp
                    }
                    //don't bother checking other rows since we've swapped
                    break;
                }
            }
            //get the new diagonal
            e = C[i][i];
            //if it's still 0, not invertable (error)
            if(e==0){return}
        }
        
        // Scale this row down by e (so we have a 1 on the diagonal)
        for(j=0; j<dim; j++){
            C[i][j] = C[i][j]/e; //apply to original matrix
            I[i][j] = I[i][j]/e; //apply to identity
        }
        
        // Subtract this row (scaled appropriately for each row) from ALL of
        // the other rows so that there will be 0's in this column in the
        // rows above and below this one
        for(ii=0; ii<dim; ii++){
            // Only apply to other rows (we want a 1 on the diagonal)
            if(ii==i){continue;}
            
            // We want to change this element to 0
            e = C[ii][i];
            
            // Subtract (the row above(or below) scaled by e) from (the
            // current row) but start at the i'th column and assume all the
            // stuff left of diagonal is 0 (which it should be if we made this
            // algorithm correctly)
            for(j=0; j<dim; j++){
                C[ii][j] -= e*C[i][j]; //apply to original matrix
                I[ii][j] -= e*I[i][j]; //apply to identity
            }
        }
    }
    
    //we've done all operations, C should be the identity
    //matrix I should be the inverse:
    return I;
}
</SCRIPT>
</HEAD>
<BODY BGCOLOR="#00FFFF">

<H3>8.3 Calculating selection index</H3>



<p>Inversion of the P matrix is done by a program made by Andrew to be found at the folowing location 
<A HREF="http://blog.acipo.com/matrix-inversion-in-javascript/"> Andrew Ippoliti's Blog</a>.
 <b>The selection index can handle any number of traits.</b> It is meant  for solving smaller scientific problems 
and for educational purposes. Note that the numeration 
of the animals has to be from one in consecutive order and the oldest appear first. <a href="#example">Link example</a>

<br>
<FORM name="selind">
<br><b>    ... Input aera ....   ....Output area ....</b>
<br>
<TEXTAREA NAME="in" cols="20" rows="25"></TEXTAREA>
<TEXTAREA NAME="out" cols="60" rows="25"></TEXTAREA>

<table border="4">
<tr>
  <td><input type="text" name="h1" value="Knud Christensen" ></td>
  <td><input type="text" name="h2" value="Mail kc@sund.ku.dk" ></td>
  <td><input type="text" name="h3" value="April 2015" ></td>
  <td><input type="button" name="h5" value="Restart" OnClick="Restart()"></td>
  <td><input type="button" name="h4" value="Evaluate" OnClick="Calculate()"></td>
 
</tr><tr>
<td>Set digit for print -> </td>
<td><input type="text" name="gg2" value="5" ></td>

</tr></table>
</form>


<P><b>Put your data in the input area and press the botton Evaluate</b> The program 
can be used for any number of variables. 
<br>The format of the input file (a) is specified below:
Zero is treated as missing value so if zero is a part of the observation set a constant should be added.  
The first 4 columns in the dataset shall contain animal, sire and dam  and number - the other columns
 can be used freely for any trait number.
The index is calculated as deviations from the means, so they are centred around zero. 
<br>If the number of traits in the selection goal are different from the observed trait number. Either there can be
 introduced an extra trait containing zeros or opposite the economic weight of a trait can be set as zero.

<p><b>The first data line specify the parameters as follows</b> - referring to first example below as well as in general



<pre>             The first line
1.  0 has to be there
 

2.  specify number of variables
    
3-4  has to be filled with zeros

5.- c<sup>2</sup> for repeated observation for the trait -otherwise zeros

       The following lines 
    (one for each variable) contain VarP, VarA, economic weight and mean value and correlations 
    - additive correlations above diagonal and phenotypic below

       Followed by the animal lines containing
   animal, sire and dam  and number of obs. + the variables

   The number of observation should be interpreted as following:
    negative numbers own records, works ok
    positive numbers offspring group - only one parent half sib group
 			             - both parents    full sib group
   <b>positive number of obs (it becomes an pseudo animal)</b> and the value of the offspring group is only used to transfer to the parents  
</pre>
<p><a name="example"></a><b>Example of calculating a selection index for 4 animals and animal 3 has 3 observations one for each 
of the 3 trait with the heritability of .5, .2 and .33, respectively; and both genetic and
phenotypic correlations medium to high.</b>
  
<br>Each line contain: Animal Sire Dam, where 0 means unknown, the number factor, and 3 variables
 - except first line which specify the parameters explained above, and a line for each variable. 
<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD BGCOLOR="#99ff99">
<pre>Put the data below in the <b>input
window</b> followed by using the <b>Evaluate</b> 

 
0  3  0  0    0     0     0

1 .5  9  10   0     .707  .6           
5  1  1  50   .65  0    .495   
3  1  .1 200  .5  .52    0             

1  0  0  0    0     0     0   
2  0  0  0    0     0     0 
3  1  2  0    9     0     0   
3  1  2  0    0     45    0  
3  1  2  0    0     0     210
4  1  0  0    0     0     0 
</td><td>

<pre>Followed by  the 
Selection index
Animal   Index  Accuracy squared
 
 1.0000	 0.0432	 0.1296	
 2.0000	 0.0432	 0.1296	
 3.0000	 0.0865	 0.5187	
 3.0000	 0.0865	 0.5187	
 3.0000	 0.0865	 0.5187	
 4.0000	 0.0216	 0.0324	

( relationships)
 1.    0.   0.50 0.50 0.50  0.50 
 0.    1.   0.50 0.50 0.50  0. 
 0.50  0.50 1.  1.   1.    0.25 
 0.50  0.50 1.  1.   1.    0.25 
 0.50  0.50 1.  1.   1.    0.25 
 0.50  0.   0.25 0.25 0.25  1.  </pre>
</td> 
<td>
<pre>
( the P matrix)
 1.0000	 1.4534	 0.8660	
 1.4534	 5.0000	 2.0139	
 0.8660	 2.0139	 3.0000	 
                              
( the A matrix)
 0.5000	 0.4999	 0.4242	
 0.4999	 1.0000	 0.4950	
 0.4242	 0.4950	 1.0000	 </pre>
</td> </TR></table>


<br>A very simple example, 1 trait h<sup>2</sup>=0.2 weight factor=1 and mean value=10, 4 animals
 sire 
and 2 offspring with observations 9 and 13, and one offspring without observation.

<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD>
<pre>Put the data below in 
the input window followed by 
using the <b>Evaluate</b> 


 
 0  1 0 0 0 

 1 .2 1 10 0             
 
 1  0 0 0 0 
 2  1 0 0 9   
 3  1 0 0 13
 4  1 0 0 0</pre>

</td><td>
<pre>Followed by

Selection index
Animal   Index  Accuracy squared
 
 1.0000  0.1904  0.0952 
 2.0000 -0.0776  0.2080 
 3.0000  0.5538  0.2080 
 4.0000  0.0952  0.0238 
</pre></td> 
<td>
<pre>( relationships)
 1.0000  0.5000  0.5000  0.5000 
 0.5000  1.0000  0.2500  0.2500 
 0.5000  0.2500  1.0000  0.2500 
 0.5000  0.2500  0.2500  1.0000 

( the P matrix)
 1.0000  0.0500 
 0.0500  1.0000
                              
( the A matrix)
0.2000</pre>
</td> </TR></table>

<br>And the same observation joined in a mean of 11 in a half sib  offspring group ("animal" 3.)

<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD>
<pre>Put the data below in 
the input window followed 
by using the <b>Evaluate</b> 

 
 0  1 0 0 0 

 1 .2 1 10 0             
 
 1  0 0 0 0 
 2  1 0 0 0  
 3  1 0 2 11
 4  1 0 0 0</pre>
</td><td>
<pre>Resulting in the following
in the output window


</td><td>
<pre>Selection index
Animal   Index  Accuracy squared

Animal 3 represent an offspring group 

 
 1.0000  0.1904  0.0952 
 2.0000  0.0952  0.0238 
 3.0000  0.3809  0.0000	
 4.0000  0.0952  0.0238 
 
</pre></td> 
<td>
<pre>( relationships)
 1.0000  0.5000  0.5000  0.5000 
 0.5000  1.0000  0.2500  0.2500 
 0.5000  0.2500  1.0000  0.2500 
 0.5000  0.2500  0.2500  1.0000 

( the P matrix)
 0.5250 
                              
( the A matrix)
0.2000</pre>
</td> </TR></table>

<br>Or the same observation joined in a mean of 11 in a full sib  offspring group ("animal" 3.)

<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD>
<pre>Put the data below in 
the input window followed 
by using the <b>Evaluate</b> 

 
 0  1 0 0 0 

 1 .2 1 10 0             
 
 1  0 0 0 0 
 2  0 0 0 0  
 3  1 2 2 11
 4  1 0 0 0</pre>
</td><td>

</td><td>
<pre>  
Selection index
Animal   Index  Accuracy squared

Animal 3 represent an offspring group 

 1.0000  0.1818  0.0909 
 2.0000  0.1818  0.0909 
 3.0000  0.3636  0.0000	
 4.0000  0.0909  0.0227  
 
</pre></td> 
<td>
<pre>( relationships)
 1.0000  0.0000  0.5000  0.5000 
 0.0000  1.0000  0.5000  0.0000 
 0.5000  0.5000  1.0000  0.2500 
 0.5000  0.0000  0.2500  1.0000 

( the P matrix)
0.5500  
                              
( the A matrix)
0.2000</pre>
</td> </TR></table>


<br>Or repeated observations; h<sup>2</sup>=0.2, c<sup>2</sup>=0.1 weight factor=1 and mean value=10, 
3 animals sire 
and 1 offspring with observations 11 based on two repetitions, and an offspring without observation
<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD>
<pre>Put the data below in 
the input window followed
 by using the <b>Evaluate</b> 

   
 0  1 0 0 .1 

 1 .2 1 10 0             
 
 1  0 0 0  0 
 2  1 0 -2 11   
 3  1 0 0  0
 
</td><td>
<pre> 
 
Selection index
Animal   Index  Accuracy squared
 
 1.0000  0.1538  0.0769 
 2.0000  0.3076  0.3076 
 3.0000  0.0769  0.0192 

( relationships)
 1.0000  0.5000  0.5000 
 0.5000  1.0000  0.2500 
 0.5000  0.2500  1.0000  
</pre>
</td> 
<td>
<pre>
( the P matrix)
0.6500 
                              
( the A matrix)
0.2000</pre>
</td> </TR></table>

<br>Or the same observation - 2 half sib's and the mother to one of the half sibs. <b>Note the negative 
weight factors of the mother for the estimation of the father, the b's</b>

<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD>
<pre>Put the data below in 
the input window followed 
by a return stroke 
 
 
 0  1 0 0 0 

 1 .2 1 10 0             
 
 1  0 0 0 0 
 2  0 0 0 9  
 3  1 2 2 13
 4  1 0 0 9 </pre>
 
</td><td>
<pre> 

Selection index

Animal   Index  Accuracy squared
 1.0000	 0.4567	 0.1339	
 2.0000	 0.2688	 0.2595	
 3.0000	 0.9488	 0.0000	
 4.0000	 0.0344	 0.2148	 
 
</pre></td> 
<td>
<pre>( the b's)
<b>-0.0096</b>	 0.1918	 0.0810	-0.0040	
 0.0962	 0.0810	 0.1898	 0.0405	
 0.0951	-0.0040	 0.0405	 0.1979	

( the P matrix)
 1.0000	 0.1000	 0.0000	
 0.1000	 1.0000	 0.0500	
 0.0000	 0.0500	 1.0000  
                              
( the A matrix)
0.2000</pre>
</td> </TR></table>

<br>Two traits - positive correlation - three observations and five related individuals

<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD>
<pre>Put the data below in 
the input window followed
by using the <b>Evaluate</b> 
 
 
 0  2 0   0  0   0

 1 .2   1 10 0  .5   
 2 .5 0.4 40 .6  0     
 
 1  0   0  0  0   0
 2  0   0  0  0   0 
 3  1   2  0  0  45
 4  1   0  0 11   0
 5  1   0  0 0   37</pre>
</td><td>
 
</td><td>
<pre> 

Selection index

Animal   Index  Accuracy squared
 
 1.0000	 0.2890	 0.1127	
 2.0000	 0.4630	 0.0396	
 3.0000	 0.8390	 0.1714	
 4.0000	 0.3348	 0.1849	
 5.0000	-0.3068	 0.1714	 
</pre></td> 
<td>
<pre>( relationship)
 1.0000	 0.0000	 0.5000	 0.5000	 0.5000	
 0.0000	 1.0000	 0.5000	 0.0000	 0.0000	
 0.5000	 0.5000	 1.0000	 0.2500	 0.2500	
 0.5000	 0.0000	 0.2500	 1.0000	 0.2500	
 0.5000	 0.0000	 0.2500	 0.2500	 1.0000	

( the P matrix)
 2.0000	 0.0395	 0.1250	
 0.0395	 1.0000	 0.0395	
 0.1250	 0.0395	 2.0000	
                              
( the A matrix)
 0.2000	 0.1581	
 0.1581	 0.5000</pre>
</td> </TR></table>

<br>Two traits - negative correlation - the same observations

<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD>
<pre>Put the data below in 
the input window followed 
by using the <b>Evaluate</b> 
 
 
 0  2 0   0  0   0

 1 .2   1 10 0  -.5 
 2 .5 0.4 40 -.6  0   
 
 1  0   0  0  0   0
 2  0   0  0  0   0 
 3  1   2  0  0  45
 4  1   0  0 11   0
 5  1   0  0 0   37</pre>
 
 
</td><td>
<pre>  
Selection index

Animal   Index  Accuracy squared
 
 1.0000	 0.0915	 0.0338	
 2.0000	 0.0549	 0.0014	
 3.0000	 0.1281	 0.0139	
 4.0000	 0.1523	 0.1233	
 5.0000	-0.0058	 0.0139	   
</pre></td> 
<td>
<pre>( relationship)
 1.0000	 0.0000	 0.5000	 0.5000	 0.5000	
 0.0000	 1.0000	 0.5000	 0.0000	 0.0000	
 0.5000	 0.5000	 1.0000	 0.2500	 0.2500	
 0.5000	 0.0000	 0.2500	 1.0000	 0.2500	
 0.5000	 0.0000	 0.2500	 0.2500	 1.0000	

( the P matrix)
 2.0000	-0.0395	 0.1250	
-0.0395	 1.0000	-0.0395	
 0.1250	-0.0395	 2.0000	
                              
( the A matrix)
 0.2000	-0.1581	
-0.1581	 0.5000	
</pre>
</td> </TR></table>

<br>Two traits - negative correlation -  large half sib progeny groups 

<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD>
<pre>Put the data below in 
the input window followed 
by using the <b>Evaluate</b> 
 
 
 0  2 0   0  0   0

 1 .2   1 10 0  -.5 
 2 .5 0.4 40 -.6  0   
 
 1  0   0  0  0   0
 2  0   0  0  0   0 
 3  1   2  0  0  45
 4  1   0  1000 11   0
 5  1   0  1000 0   37</pre>
</td><td>
 
<pre> 

Selection index

Animal   Index  Accuracy squared
 
1.0000	-0.3624	 0.9684	
 2.0000	 0.0887	 0.0015	
 3.0000	-0.0480	 0.2457	
 4.0000	-0.0011	 0.0000	
 5.0000	-1.0380	 0.0000 
</pre></td> 
<td>
<pre>( relationship)
 1.0000	 0.0000	 0.5000	 0.5000	 0.5000	
 0.0000	 1.0000	 0.5000	 0.0000	 0.0000	
 0.5000	 0.5000	 1.0000	 0.2500	 0.2500	
 0.5000	 0.0000	 0.2500	 1.0000	 0.2500	
 0.5000	 0.0000	 0.2500	 0.2500	 1.0000	

( the P matrix)
 2.0000	-0.0395	 0.1250	
-0.0395	 0.0509	-0.0395	
 0.1250	-0.0395	 0.1268	
                              
( the A matrix)
 0.2000	-0.1581	
-0.1581	 0.5000	
</pre>
</td> </TR></table>

<br>Two traits - negative correlation -  large full sib progeny groups 

<TABLE CELLPADDING="5" WIDTH="96%">
  <TR>
    <TD>
<pre>Put the data below in 
the input window followed 
by using the <b>Evaluate</b> 
 
a=
 0  2 0   0  0   0

 1 .2   1 10 0  -.5 
 2 .5 0.4 40 -.6  0   
 
 1  0   0  0  0   0
 2  0   0  0  0   0 
 3  1   0  0  0  45
 4  1   2  1000 11   0
 5  1   2  1000 0   37</pre>
 
</td><td>
<pre> 
Selection index

Animal   Index  Accuracy squared
 
 1.0000	-0.1562	 0.4928	
 2.0000	-0.2264	 0.4927	
 3.0000	 0.0270	 0.1276	
 4.0000	-0.1384	 0.0000	
 5.0000	-0.4706	 0.0000	 
</pre></td> 
<td>
<pre>( relationship)
 1.0000	 0.0000	 0.5000	 0.5000	 0.5000	
 0.0000	 1.0000	 0.0000	 0.5000	 0.5000	
 0.5000	 0.0000	 1.0000	 0.2500	 0.2500	
 0.5000	 0.5000	 0.2500	 1.0000	 0.5000	
 0.5000	 0.5000	 0.2500	 0.5000	 1.0000	

( the P matrix)
 2.0000	-0.0395	 0.1250	
-0.0395	 0.1009	-0.0790	
 0.1250	-0.0790	 0.2517	
                              
( the A matrix)
 0.2000	-0.1581	
-0.1581	 0.5000	
</pre>
</td> </TR></table>

<P><A HREF="0.htm">Back to the other programs</A>
<P>The theory is described well in <A HREF="//agtr.ilri.cgiar.org/index.php?option=com_content&view=article&id=74&Itemid=185">Erling Strandbergs notes </A>

<br>and in the selection theory is described  by Joel Weller in the book 
"Economic aspects of animal breeding" Chapman Hall, London.

</BODY>
</HTML>
